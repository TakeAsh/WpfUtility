using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using TakeAshUtility;

namespace WpfUtility {

    public class DataGridEx : DataGrid {

        static DataGridEx() {
            DefaultStyleKeyProperty.OverrideMetadata(
                typeof(DataGridEx),
                new FrameworkPropertyMetadata(typeof(DataGridEx))
            );
        }

        public DataGridEx()
            : base() {

            _columnNames = new List<string>();
            _autoFilterMenus = new Dictionary<string, ContextMenu>();
            _collectionView = CollectionViewSource.GetDefaultView(this.Items) as CollectionView;
            ((INotifyCollectionChanged)_collectionView).CollectionChanged += OnUpdateItems;
            _collectionView.Filter = PredicateAutoFilter;
            ColumnHeaderStyle = new Style();
            AutoGeneratedColumns += OnAutoGeneratedColumns;
        }

        private List<string> _columnNames;
        private Dictionary<string, ContextMenu> _autoFilterMenus;
        private Dictionary<string, Dictionary<string, bool>> _autoFilterItems;
        CollectionView _collectionView;

        public void UpdateAutoFilter() {
            if (Items == null) {
                return;
            }
            if (_columnNames.Count == 0) {
                _autoFilterItems = new Dictionary<string, Dictionary<string, bool>>();
                foreach (var item in Items) {
                    var pis = item.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.Public)
                        .Where(pi => pi.GetIndexParameters().Length == 0)
                        .ToList();
                    if (pis == null || pis.Count == 0) {
                        continue;
                    }
                    pis.ForEach(pi => {
                        if (!_autoFilterItems.ContainsKey(pi.Name)) {
                            _autoFilterItems[pi.Name] = new Dictionary<string, bool>();
                        }
                        var value = pi.GetValue(item, null).SafeToString(null);
                        if (value != null) {
                            _autoFilterItems[pi.Name][value] = true;
                        }
                    });
                }
            } else {
                _columnNames.ForEach(column => {
                    foreach (var item in Items) {
                        var pi = item.GetType().GetProperty(column, BindingFlags.Instance | BindingFlags.Public);
                        if (pi == null) {
                            continue;
                        }
                        var value = pi.GetValue(item, null).SafeToString(null);
                        if (value != null &&
                            _autoFilterItems.ContainsKey(column) &&
                            !_autoFilterItems[column].ContainsKey(value)) {
                            _autoFilterItems[column][value] = true;
                        }
                    }
                    var menu = _autoFilterMenus[column];
                    menu.Items.Clear();
                    menu.Items.Add<UIElement>(CreateInitialAutoFilterMenuItems(column));
                    if (_autoFilterItems.ContainsKey(column)) {
                        menu.Items.Add<UIElement>(_autoFilterItems[column]
                            .OrderBy(item => item.Key)
                            .Select(item => CreateValueSelectCheckBox(column, item.Key))
                        );
                    }
                });
            }
        }

        private List<UIElement> CreateInitialAutoFilterMenuItems(string column) {
            var checkBoxAll = new CheckBox() {
                Content = "All",
                IsChecked = !_autoFilterItems.ContainsKey(column) ?
                    true :
                    _autoFilterItems[column].Aggregate(true, (current, kvp) => current && kvp.Value),
            };
            checkBoxAll.Checked += (sender, e) => {
                var checkBox0 = sender as CheckBox;
                _autoFilterMenus[column].Items
                    .OfType<CheckBox>()
                    .Where(checkBox => checkBox != checkBox0)
                    .ToList()
                    .ForEach(checkBox => {
                        checkBox.IsChecked = true;
                    });
            };
            return new List<UIElement>() {
                checkBoxAll,
                new Separator(),
            };
        }

        private CheckBox CreateValueSelectCheckBox(string column, string item) {
            var checkBox = new CheckBox() {
                Content = item,
                IsChecked = _autoFilterItems[column][item],
            };
            checkBox.Checked += (sender, e) => {
                _autoFilterItems[column][item] = true;
            };
            checkBox.Unchecked += (sender, e) => {
                _autoFilterItems[column][item] = false;
                var checkBoxAll = _autoFilterMenus[column].Items[0] as CheckBox;
                checkBoxAll.IsChecked = false;
            };
            return checkBox;
        }

        private bool PredicateAutoFilter(object item) {
            if (_autoFilterItems == null) {
                return true;
            }
            foreach (var p in _autoFilterItems.Keys) {
                foreach (var kvp in _autoFilterItems[p]) {
                    if (kvp.Value == true) {
                        continue;
                    }
                    var pi = item.GetType().GetProperty(p, BindingFlags.Instance | BindingFlags.Public);
                    var value = pi.GetValue(item, null).SafeToString();
                    if (value != null && value == kvp.Key) {
                        return false;
                    }
                }
            }
            return true;
        }

        private void OnUpdateItems(object sender, NotifyCollectionChangedEventArgs e) {
            UpdateAutoFilter();
        }

        private void OnAutoGeneratedColumns(object sender, EventArgs e) {
            if (ColumnHeaderStyle.Triggers.IsSealed) {
                return;
            }
            this.Columns
                .ToList()
                .ForEach(column => {
                    var name = column.Header.ToString();
                    _columnNames.Add(name);
                    var menu = new ContextMenu();
                    menu.Closed += (s, args) => {
                        _collectionView.Refresh();
                    };
                    menu.Items.Add<UIElement>(CreateInitialAutoFilterMenuItems(name));
                    if (_autoFilterItems.ContainsKey(name)) {
                        menu.Items.Add<UIElement>(_autoFilterItems[name]
                            .OrderBy(item => item.Key)
                            .Select(item => CreateValueSelectCheckBox(name, item.Key))
                        );
                    }
                    _autoFilterMenus[name] = menu;
                    ColumnHeaderStyle.Triggers.Add(new Trigger() {
                        Property = DataGridColumnHeader.ContentProperty,
                        Value = name,
                        Setters = { new Setter(DataGridColumnHeader.ContextMenuProperty, menu), },
                    });
                });
        }
    }
}
