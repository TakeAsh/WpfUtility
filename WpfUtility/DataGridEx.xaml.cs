using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using TakeAshUtility;

namespace WpfUtility {

    public class DataGridEx : DataGrid {

        static DataGridEx() {
            DefaultStyleKeyProperty.OverrideMetadata(
                typeof(DataGridEx),
                new FrameworkPropertyMetadata(typeof(DataGridEx))
            );
        }

        public DataGridEx()
            : base() {

            _columnNames = new List<string>();
            _autoFilterMenus = new Dictionary<string, ContextMenu>();
            var collectionView = CollectionViewSource.GetDefaultView(this.Items) as CollectionView;
            ((INotifyCollectionChanged)collectionView).CollectionChanged += OnUpdateItems;
            ColumnHeaderStyle = new Style();
            AutoGeneratedColumns += OnAutoGeneratedColumns;
        }

        private List<string> _columnNames;
        private Dictionary<string, ContextMenu> _autoFilterMenus;
        private Dictionary<string, SortedSet<string>> _autoFilterItems;

        public void UpdateAutoFilter() {
            if (Items == null) {
                return;
            }
            if (_columnNames.Count == 0) {
                _autoFilterItems = new Dictionary<string, SortedSet<string>>();
                foreach (var item in Items) {
                    var pis = item.GetType()
                        .GetProperties(BindingFlags.Instance | BindingFlags.Public)
                        .Where(pi => pi.GetIndexParameters().Length == 0)
                        .ToList();
                    if (pis == null || pis.Count == 0) {
                        continue;
                    }
                    pis.ForEach(pi => {
                        if (!_autoFilterItems.ContainsKey(pi.Name)) {
                            _autoFilterItems[pi.Name] = new SortedSet<string>();
                        }
                        var value = pi.GetValue(item, null).SafeToString(null);
                        if (value != null) {
                            _autoFilterItems[pi.Name].Add(value);
                        }
                    });
                }
            } else {
                _columnNames.ForEach(column => {
                    _autoFilterItems[column].Clear();
                    foreach (var item in Items) {
                        var pi = item.GetType().GetProperty(column, BindingFlags.Instance | BindingFlags.Public);
                        if (pi == null) {
                            continue;
                        }
                        var value = pi.GetValue(item, null).SafeToString(null);
                        if (value != null) {
                            _autoFilterItems[column].Add(value);
                        }
                    }
                    var menu = _autoFilterMenus[column];
                    menu.Items.Clear();
                    menu.Items.Add<UIElement>(CreateInitialAutoFilterMenuItems()
                        .Concat(_autoFilterItems[column]
                        .Select(value => new CheckBox() {
                            Content = value,
                            IsChecked = true,
                        }))
                    );
                });
            }
        }

        private List<UIElement> CreateInitialAutoFilterMenuItems() {
            return new List<UIElement>() {
                new CheckBox(){
                    Content = "All",
                    IsChecked = true,
                },
                new Separator(),
            };
        }

        private void OnUpdateItems(object sender, NotifyCollectionChangedEventArgs e) {
            UpdateAutoFilter();
        }

        private void OnAutoGeneratedColumns(object sender, EventArgs e) {
            if (ColumnHeaderStyle.Triggers.IsSealed) {
                return;
            }
            this.Columns
                .ToList()
                .ForEach(column => {
                    var name = column.Header.ToString();
                    _columnNames.Add(name);
                    var menu = new ContextMenu();
                    menu.Items.Add<UIElement>(CreateInitialAutoFilterMenuItems()
                        .Concat(_autoFilterItems[name].Select(value => new CheckBox() {
                            Content = value,
                            IsChecked = true,
                        }))
                    );
                    _autoFilterMenus[name] = menu;
                    ColumnHeaderStyle.Triggers.Add(new Trigger() {
                        Property = DataGridColumnHeader.ContentProperty,
                        Value = name,
                        Setters = { new Setter(DataGridColumnHeader.ContextMenuProperty, menu), },
                    });
                });
        }
    }
}
